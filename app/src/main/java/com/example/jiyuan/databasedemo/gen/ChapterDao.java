package com.example.jiyuan.databasedemo.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.jiyuan.databasedemo.model.Chapter;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CHAPTER".
*/
public class ChapterDao extends AbstractDao<Chapter, Long> {

    public static final String TABLENAME = "CHAPTER";

    /**
     * Properties of entity Chapter.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property ChapterId = new Property(1, String.class, "chapterId", false, "CHAPTER_ID");
        public final static Property Free = new Property(2, boolean.class, "free", false, "FREE");
        public final static Property Name = new Property(3, String.class, "name", false, "NAME");
        public final static Property Gl = new Property(4, String.class, "gl", false, "GL");
        public final static Property Buy = new Property(5, boolean.class, "buy", false, "BUY");
        public final static Property Rmb = new Property(6, String.class, "rmb", false, "RMB");
        public final static Property Url = new Property(7, String.class, "url", false, "URL");
    }


    public ChapterDao(DaoConfig config) {
        super(config);
    }
    
    public ChapterDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CHAPTER\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: id
                "\"CHAPTER_ID\" TEXT," + // 1: chapterId
                "\"FREE\" INTEGER NOT NULL ," + // 2: free
                "\"NAME\" TEXT," + // 3: name
                "\"GL\" TEXT," + // 4: gl
                "\"BUY\" INTEGER NOT NULL ," + // 5: buy
                "\"RMB\" TEXT," + // 6: rmb
                "\"URL\" TEXT);"); // 7: url
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CHAPTER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Chapter entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String chapterId = entity.getChapterId();
        if (chapterId != null) {
            stmt.bindString(2, chapterId);
        }
        stmt.bindLong(3, entity.getFree() ? 1L: 0L);
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
 
        String gl = entity.getGl();
        if (gl != null) {
            stmt.bindString(5, gl);
        }
        stmt.bindLong(6, entity.getBuy() ? 1L: 0L);
 
        String rmb = entity.getRmb();
        if (rmb != null) {
            stmt.bindString(7, rmb);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(8, url);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Chapter entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String chapterId = entity.getChapterId();
        if (chapterId != null) {
            stmt.bindString(2, chapterId);
        }
        stmt.bindLong(3, entity.getFree() ? 1L: 0L);
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
 
        String gl = entity.getGl();
        if (gl != null) {
            stmt.bindString(5, gl);
        }
        stmt.bindLong(6, entity.getBuy() ? 1L: 0L);
 
        String rmb = entity.getRmb();
        if (rmb != null) {
            stmt.bindString(7, rmb);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(8, url);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public Chapter readEntity(Cursor cursor, int offset) {
        Chapter entity = new Chapter( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // chapterId
            cursor.getShort(offset + 2) != 0, // free
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // name
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // gl
            cursor.getShort(offset + 5) != 0, // buy
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // rmb
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // url
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Chapter entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setChapterId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setFree(cursor.getShort(offset + 2) != 0);
        entity.setName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setGl(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setBuy(cursor.getShort(offset + 5) != 0);
        entity.setRmb(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setUrl(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Chapter entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Chapter entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Chapter entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
